--------------------------------------
The Web Application Hacker's Handbook
--------------------------------------

---------------------------
---------------------------
Core Defense Mechanisms
---------------------------
---------------------------

------------------
1) Input Validation
------------------

[+] Treat every source of input as malicious, even server-side input:
At every step of processing, apply input sanitation to the input.
If server-side data is completely trusted, a trained hacker could use it to his advantage. For example, he could get malicious SOAP (btw, look up what are SOAP services)
code into a SQL database and then have the server use that code when requesting additional data in another transaction.
Also, if the server sends an email when someone has had a failed login, then the server needs to make sure that any user data included in the email doesn't contain 
SMTP injections.

[+] Multistep validation:
When you strip <script> from input, then <sc<script>ript> will still get through. This has to be done recursively.
BUT, if the application first removes ../ recursively and then removes ..\ recursively, the following input can be used to defeat the validation:
....\/

[+] Canonicalization, in other words data transformation:
Double URL encoding:
If server does urldecode() after input validation, then you can get an apostrophe to bypass the filter by doing %2527. (%25 is %, %27 is an apostrophe)

Also, not all canonicalization takes place on the server-side. If you encode an XSS-attack, then it may go unnoticed on the server-side. 
Subsequently, some browsers automatically urldecode() certain data (like src=j&#x61;vasc&#x72ipt&#x3a;alert&#x28;1&#x29; of an iframe), 
and you could get an XSS-attack underway.

----------------------
2) Handling attackers
----------------------
[+] You should take as much action as possible to frustrate the attacker.

[+] Never give the attackers system-generated errors. Use try-catch blocks extensively (system-generated errors make life way easier for attackers)
[+] Maintain Audit Logs, which log important events. (poorly secured audit logs are good for attackers)
[+] Alert admins based on anomalous behaviour
[+] React to attacks. If you automatically block the attacker's IP (or generate a captcha or make his requests slower) based on your understanding that he's a potential attacker, then that will frustrate him to no end.

---------------------------
3) Managing the Application
---------------------------
[+] Often applications have an admin-panel built into them. That's especially security-critical, since if you can compromise that, you can compromise the
entire application.

---------------------------
---------------------------
Web Application Technologies
---------------------------
---------------------------

[+] HTTP

[+] REST - You're requesting the "state" of the current server's resources.
http://wahh-app.com/search?make=ford&model=pinto     -  This query string is, in a RESTful way:
http://wahh-app.com/search/ford/pinto

When mapping an application's attack surface, you need to take into consideration these two styles of supplying parameters.

[+] HTTP proxy - 
	*) If using HTTP, you'll specify the target server in the headers and give the request to the proxy server, who will forward it.
	*) If using HTTPS, then you first send a CONNECT request and after the TCP connection is established, the connection
		gets encrypted and the proxy just relays all the encrypted data
		
[+] Java EE (read about it in the book)

[+] ASP.NET - competitor to Java.

[+] SOAP
Applications use this to communicate with each other. 
XML in message body.

[+] DOM/Document Object Model
Abstract representation of a HTML document, which can be manipulated and queried.

[+] AJAX
Send data in the background with XMLHttpRequest.

[+] JSON
Another way of organizing data. Easier than XML.

[+] Same-origin policy
You can't make XMLHttpRequests to other domains. You can't read the cookies of other domains.
You can make GET and POST requests to other domains via images and forms, but you can't process the response from that.
You can load a script from another domain and execute it in yours.

[+] States/Sessions.
Store data about the user server-side. Each user gets a session cookie. For example, PHPSESSIONID

[+] Encoding schemes:
(Note: All this is just how it looks when being transmitted over HTTP)

URL encoding: percent and then letter: %25 is %, %20 is space, %00 is NULL byte
Unicode: has %u. %u2215 is /
UTF-8: has each byte expressed in hexadecimal and preceded by %. %c2%a9 is Â©, %e2%89%a0 is "= with a strike through it"
HTML encoding: & and then description, ends with ;. For example, &quot; is ", &amp; is &.
HTML encoding can also be done in decimal form: &#34; is ", &#39; is '
Base64 can make use of lowercase and uppercase letters, as well as '+' and '/'. It comes in blocks of three. If the final block doesn't
have enough data for three characters, it's padded with either one or two '=' signs, depending on if data for one or two characters are missing.
Hexadecimal encoding uses 0-9 and a-f.


-----------------------
Mapping the Application
-----------------------

[+] Enumerating by hand using burp is better than using an automated spider.

[+] Look for hidden content: 
backups (both files and archives -- Create archive discoverer! Maybe DL burpsuite pro) and old versions of files.
comments in HTML (both by devs and applications)and POST forms with disable submit buttons.
new functionality that's on the server for testing, but not linked from the main site (for example, when it's said "coming soon", you could see if it's already on there)
default functionality that has been left on the server (for example, default files for 3rd party apps that haven't been deleted or mby installation files)

[+] Brute-forcing directories and filenames:

1) Run basic brute-force test, looking for common directories and filenames in the folders you have discovered using manual mapping.

2) Identify what kind of naming scheme is in use. 
For example, if there are pages called AddDocument.jsp and ViewDocument.jsp, 
there may also be pages called EditDocument.jsp and RemoveDocument.jsp.
You'll get a feel for the dev's naming style. Does he do AddANewUser.asp, AddUser.asp, AddUsr.asp or AddU.jsp?

If you can fine-tune your wordlist and make more precise searches, then do so.

If you find a document called AnnualReport2015, then you can guess that there's also one called AnnualReport2016.

