 ----------
   Dice
-----------
We have the client-side refresh in dice.js.
Clicking on the server seed refresh button actually just refreshes the client seed (I think)

1) is in PHP, since web request to curl showed there is a php session id.
2) We have output 15, total 30 numbers. In conclusion, the seed is between 14,5 and 15,5. 
Implement RNG in javascript , then crack it
3) In linux, both HAVE_RANDOM and HAVE_LRAND48 are defined. So, random() is called.

TWO SOLUTIONS TO RANGED RNG:
1) (less likely to work) maybe the algorithm which starts eliminating possibilities is an exponentially growing one? (I don't think it is)
2) (should work) Tokenbets changes the outputs into a seed which is then used in another RNG. That is how we get the final result. However,
We should be able to work out roughly what the seeds could be (for every letter in the serverseed, there are two possibilities, the max ranged output
and min ranged output). We can then work out all the possible seeds which the actual seed which gets fed into the new RNG could be. 
The great thing is, the distribution isn't necessarily 50/50 there. We can keep requesting new serverseeds until we hit a situation where 
our chances of winning are good (60% for example).

PROBLEM:
serverseed generation isn't behaving like we expected. Additional research necessary.

-------------
PHP
------------
The algorithm (type3) is really simple. There are 31 numbers in a state.
val = (state[index] += state[index-3])
result = (val >> 1) & 0x7fffffff
Because of the +=, the state constantly changes, and state[index] = val.
the result is arithmetic bitshifted to the right by one.

It's based on libc. Add -std=c++11 or -std=gnu++11 compiler options if you want cstdlib.

it doesn't matter if you do rand() or random(), or srand() or srandom(). they're exactly the same thing.

On php, they probably would have implemented it by doing php(0,64) (e.g. they used a range)

functions you call from php are defined as PHP_FUNCTION(x). the rest are normal functions

Depending on if ZTS is activated, it will go to different places.
my build isn't ZTS-based, this is likely for the server, too.

-----------
V8 
----------
Way too fucking complicated for me atm, skipping this.

Mathrandom calls generaterandomnumbers (line 84): https://github.com/v8/v8/blob/264fa75e529562a6f5df97c5daf1867cd81c58d2/src/js/math.js
generate next 64 states (line 267): https://github.com/v8/v8/blob/2160429fd458e3c095475e718c97f77ac90d906f/src/runtime/runtime-maths.cc#L267 
Shifts around the state - xorshift128 (line 102): https://github.com/v8/v8/blob/8cd3cf297287e581a49e487067f5cbd991b27123/src/base/utils/random-number-generator.h
converts the uint64 to double (line 93): https://github.com/v8/v8/blob/8cd3cf297287e581a49e487067f5cbd991b27123/src/base/utils/random-number-generator.h#L93


some explanations: https://www.reddit.com/r/learnprogramming/comments/46w8g3/javascript_what_does_the_percentage_sign_in_front/


--------------
Q:In which language is the server-side rand() implemented? 
A:It's in PHP, because we found a PHPSESSIONID

Q:Does javascript require the math.random to be seeded? If not, then maybe serverside php reseeds it
every time it's called (opening up a vector for attacking the seed) 
A:probably isn't reseeded each time. if nothing else works, we can try this

Q:How are the seeds generated? 
A:By X random() calls, which are each changed to a number or letter

Q:How do we get the server seed?
A:
1)Look at how the client seed is generated and mimic that.
2)tokenbets.com/do/dice gives out a $sseed. It changes every time.

Q:Is the verifier rand() and seed generator the same one?
A:The rand() which determines the output in verifier and rand() that generates seeds are on different processes and are separate generators.

in JQuery, $("#searchterm") is document.getElementById(searchterm)
